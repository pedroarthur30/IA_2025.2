import java.util.Scanner

/**
 * 4.1 Especifica√ß√µes: Action - Representa as a√ß√µes poss√≠veis do agente.
 * Usar uma 'enum class' garante seguran√ßa de tipos, limitando as a√ß√µes a um conjunto pr√©-definido.
 */
enum class Action(val displayName: String) {
    ASPIRAR("Aspirar"),
    DIREITA("Direita"),
    ESQUERDA("Esquerda")
}

/**
 * 4.1 Especifica√ß√µes: Perception - Representa as informa√ß√µes percebidas.
 * Uma 'data class' √© ideal aqui, pois o Kotlin gera automaticamente m√©todos √∫teis
 * como equals(), hashCode() e toString() para classes que apenas armazenam dados.
 */
data class Perception(val location: String, val isDirty: Boolean)

/**
 * 4.1 Especifica√ß√µes: Environment - Representa o ambiente (mundo do aspirador).
 */
class Environment(var isDirtyA: Boolean, var isDirtyB: Boolean, var agentLocation: String) {
    /**
     * Retorna a percep√ß√£o atual do agente com base em sua localiza√ß√£o.
     */
    fun getPerception(): Perception {
        val isCurrentLocationDirty = if (agentLocation == "A") isDirtyA else isDirtyB
        return Perception(agentLocation, isCurrentLocationDirty)
    }

    /**
     * Atualiza o estado do ambiente com base na a√ß√£o do agente.
     * A express√£o 'when' √© a forma idiom√°tica do Kotlin para lidar com m√∫ltiplas condi√ß√µes,
     * sendo mais poderosa e leg√≠vel que um switch-case tradicional.
     */
    fun updateState(action: Action) {
        when (action) {
            Action.ASPIRAR -> {
                if (agentLocation == "A") isDirtyA = false else isDirtyB = false
            }
            Action.DIREITA -> agentLocation = "B"
            Action.ESQUERDA -> agentLocation = "A"
        }
    }
}

/**
 * 4.1 Especifica√ß√µes: Agent - Representa o agente aspirador de p√≥ reativo simples.
 */
class Agent(private val environment: Environment) {

    /**
     * Captura a percep√ß√£o do ambiente.
     */
    fun perceives(): Perception {
        return environment.getPerception()
    }

    /**
     * Retorna a a√ß√£o escolhida com base na percep√ß√£o, implementando a l√≥gica
     * do Agente Reativo Simples definida no pseudoc√≥digo.
     */
    fun act(): Action {
        val perception = perceives()
        // L√≥gica do pseudoc√≥digo: ASPIRADOR_REATIVO_SIMPLES([posicao, situacao])
        return if (perception.isDirty) {
            Action.ASPIRAR
        } else if (perception.location == "A") {
            Action.DIREITA
        } else { // perception.location == "B"
            Action.ESQUERDA
        }
    }
}

/**
 * 4.1 Especifica√ß√µes: VacuumWorld - Cont√©m a fun√ß√£o principal (main) para executar a simula√ß√£o.
 * Usar 'object' cria uma classe Singleton, um padr√£o comum em Kotlin para agrupar
 * fun√ß√µes est√°ticas e pontos de entrada de um programa.
 */
object VacuumWorld {

    /**
     * Fun√ß√£o auxiliar para imprimir o estado do ambiente de forma visual.
     */
    private fun printEnvironmentState(env: Environment) {
        val agentA = if (env.agentLocation == "A") "ü§ñ" else " "
        val agentB = if (env.agentLocation == "B") "ü§ñ" else " "
        val dirtA = if (env.isDirtyA) "üí©" else "‚ú®"
        val dirtB = if (env.isDirtyB) "üí©" else "‚ú®"

        println("[A: $agentA $dirtA]  [B: $agentB $dirtB]")
    }

    /**
     * Ponto de entrada do programa.
     */
    @JvmStatic
    fun main(args: Array<String>) {
        val scanner = Scanner(System.`in`)

        // 5. Entrada
        println("--- Configura√ß√£o Inicial do Ambiente ---")
        print("Posi√ß√£o inicial do Agente (A ou B): ")
        val startLocation = scanner.next().uppercase()

        print("A sala A est√° suja? (true/false): ")
        val isDirtyA = scanner.nextBoolean()

        print("A sala B est√° suja? (true/false): ")
        val isDirtyB = scanner.nextBoolean()

        print("N√∫mero de passos da simula√ß√£o: ")
        val steps = scanner.nextInt()
        println("----------------------------------------")

        // Cria√ß√£o das inst√¢ncias do ambiente e do agente
        val environment = Environment(isDirtyA, isDirtyB, startLocation)
        val agent = Agent(environment)

        // Loop principal da simula√ß√£o
        for (i in 1..steps) {
            println("Passo $i")
            // Sa√≠da: Situa√ß√£o do ambiente
            printEnvironmentState(environment)

            // Agente percebe o ambiente
            val perception = agent.perceives()
            val dirtStatus = if (perception.isDirty) "üí©" else "‚ú®"
            println("Percep√ß√£o: ${perception.location}, $dirtStatus")

            // Agente decide e executa a a√ß√£o
            val action = agent.act()
            println("‚û°Ô∏è A√ß√£o: ${action.displayName}")

            // Ambiente √© atualizado pela a√ß√£o
            environment.updateState(action)
            println("\n----------------------------------------")
        }
    }
}